=== NEWEST FORMALIZATION OF THE RESET PROTECTION SYSTEM ===

Goal: make a system that works with a file in such a way that the algorithm working on the file will be able to be stopped at any point and restarted from the beginning, and that wouldn't lead to the algorithm malfunctioning/file getting corrupted.

Two assumptions:
1. The input is an array of potentially infinite size, and each element of said array is either a "0" or a "1", can't be in-between
2. Reads and writes to the array are together ordered

There is a "static area" of the array and a "dynamic area". Any file-modifying algorithm is split up into "states". Switches between states are atomic: in the static memory, there must be two versions of the state - one "past" and one "future", and a bit determining which is which. When a "state" is processed, the "past" region is read-only, while the "future" region is write-only, and by flipping the bit only when "future" is fully written, atomicity of such state saves can be achieved. When a state is processed, it goes through these stages:
1. past: read-only | future: write-only | dynamic: write-only
2. past: read-only | future: write-only | dynamic: read-only
This ensures that the dynamic area will not get any modification based on unpredictable data, while allowing to query data from the dynamic area.

Any state can be supplemented with any outside memory, as long as there is no data that is read from it that wasn't previously written into it by the same execution of the state processing algorithm. For example, a chunk of file space can be reserved to store temporaries needed for state processing, or the same storage can be done in RAM and not in the file.

Same, but briefly:
* Stage 1: past: read-only; future: write-only; dynamic: write-only
* <any operations here>
* Stage 2: past: read-only; future: write-only; dynamic: read-only
* <any operations here>
* At this point, "future" should be fully written; flipping the bit that flips the past and the future; no more operations are allowed

= BETTER FORMALIZATION =

1. We mustn't make decisions based on unpredictable values
2. Everything that comes from the outer state is unpredictable
3. Dynamic area is part of outer state
4. Any value inside "past" is predictable
5. Any value can be written inside "future", even if unpredictable

= or, even better? =

* Thou shall not make decisions based on data that may differ between re-runs of state (where "state" is the static area's state thing)
* Thou shall not modify permanent stuff (the kind of stuff that survives state re-runs) outside of static state, where the modifications will depend on the information that may be different between state re-runs

= better?: =

* There must be no writes based on unpredictable data

= better?: =

* We mustn't read from areas we may modify later

= much more generic, perhaps helpful for googling?: =

* The algorithm needs to be split into *idempotent* parts, and between those parts there should be checkpoints

=

* Do not write to places from which we were previously reading - PERFECT!?

=

* All information in the algorithm should be retrievable on restart ??

=== FREE NODES THOUGHTS ===

let's say we're not doing the protections yet

free space stack:
root: *node
*node=null => next is at next addr. so the queue is infinite

free space pop with one slot (*root (ptr==index in file)):
. new = *root // read
. next = *new // read
. if next=null:
. . next = new+blocksize
. . *next = null // write
. *root = next // write
. rt new

free space pop with two slots (*root, *end): // this is better because otherwise there would still be two memory areas taken, but in this case it even takes less space (and less ops)
. freeSlot = *root // read
. if freeSlot=null:
. . freeSlot = *end // read
. . *end = freeSlot + 4 // write
. else:
. . *root = *freeSlot // read, then write
. rt freeSlot

free space push (*root, *new):
. *new = *root // read, then write
. *root = new // write

every *= is a write, every =* is a read

=== PROTECTED STATIC VARIABLE CHANGE, VARIABLE OF ANY SIZE ===

* bitflips are always atomic (bc there's no state between a "0" and a "1")
* two slots for the variable and one bit to indicate which slot is active ("0" = first, "1" = second)
* init the bit with "0" and the first slot with a _valid_ variable value. do this on database initialization
* on variable change, write to the opposite slot (its index being `1 - index_bit`). after the write, flip the index bit

=== AN IDEA ABOUT STORING THE STACK STATE INSIDE OF THE FILE ===

I guess everything can be made perfect if all the internal state (i.e. the local variables from the stack) from the db's library functions can be stored inside the static area in the file, except for constants, which will only store various offsets, and the file interaction object (the thing that can do reads or writes)

In fact, this can be extended by splitting the code into states, where it will be like this: (state info available for reading, any position in file available for writing) -> (everything available for reading, nothing available for writing). After the state finishes execution, it needs to switch to another state, with the "nothing to do" state being an exception to that (it should be a valid state, but shouldn't switch to other states, and instead control should be passed back to the caller). This all can be done with something like this:

const stateIds = {
    first: 0,
    second: 1,
    end: 2,
};

let writeStateToFile = state => {
    let bytes = state.makeBytes();
    /* ... */
};

let processStates = initialState => {
    let state = initialState;
    for (;;) {
        if (state.id == stateIds.end) {
            return;
        }
        state = {
            stateIds.first: (ctx, writer) => {
                writer.write(ctx.some_addr, ctx.some_value + 1);
                let reader = writer.makeReader();
                if (reader.read(ctx.some_other_addr)) {
                    return makeStateSecond();
                } else {
                    return makeEndState();
                }
            },
            stateIds.second: (ctx, writer) => {
                // imagine something here
                return makeEndState();
            },
        }[state.id](state???, makeWriter());
        writeStateToFile(state);
    }
};

=== DOING EVERYTHING AS IF THERE'S NO POWER-DOWN PROTECTION TO FURTHER TURN THE CODE INTO POWER-DOWN PROTECTED CODE ===

How to do the unprotected->protected conversion:
* Group file reads and file writes in the code into "write segments" and "read segments"
* Before every write segment, do a state save
* For the input data (i.e. the array of data to add/remove), have it be accessible through a separate parameter which may be null (for recovery cases)

To remove unnecessary saves, this thing can be remodeled:
* We start with a "does state depend on changes that may be overwritten?" flag set to "0"
* On writes, if the flag is "1", state must be saved before the write and the flag should be set to "0"
* On reads, the flag is set to "1"

Actually, the only time something has to be done is when there's any indirection. This is why writes to static state are safe: no pointers => no indirection. But I'm not sure about this, the static area access may not be entirely without indirection. Maybe this all is only about getting addresses, not the values that can be read from them

Essentially, I need to separate code into regions that can be re-run with the same static data but differing dynamic data?? One way to know we're not going into dynamic data as a data source is by not using any pointers

I guess: "we need to have all of the addresses on us before doing the writing". This just means that this is bad: `write(read(ptr), value)`, while this is good: `write(staticAddr, read(ptr)); checkpoint; write(staticAddr, value);`. Here's an example of no-checkpoint static state shenanigans: `if (read(st) == 0) { no_checkpoint_here(); write(st, 1); no_checkpoint_here_either(); do_other_thing(); }`

Perhaps, the basic idea is "don't overwrite invariants"? Or, maybe, "don't overwrite parameters". Actually, maybe it is about copying everything to the protected (=static) state and then only doing checkpoints if a value was first read from a static variable and then written to the same static variable - between these two there needs to be a border of saving (=a checkpoint). "Modify someplace else, only read from not that place" = "for any checkpoint area, mark every bit of the file as either read-only or write-only" <- by the way, exactly what's being done by "duplicate protection". Even better: every bit starts as "write only" and can be promoted to "read only" at any time, but a promotion back into "write only" requires making a checkpoint (e.g. remembering the position in the algorithm)

---
> every bit starts as "write only" and can be promoted to "read only" at any time, but a promotion back into "write only" requires making a checkpoint (e.g. remembering the position in the algorithm)
---

=== DUPLICATE PROTECTION FUCKUP ===

If I'm only gonna be writing parts of the other state and not the whole thing, I'd need to copy the active state into the inactive one after switching, i.e. every state variant will have to start being readable only with its covariant being an exact copy.

=== THINKING THROUGH THE STORAGE OF DIFFERENT ENTITIES ===

The data tree:
* Static memory: ptr to root (for case: empty tree, however, an impl with "0"-"1"-pointers may also be used, it's not much different)
* Dynamic memory: ["0"-ptr, "1"-ptr] slots
* Features: any of the branch pointers may be NULL

The free slot FIFO queue:
* Static memory: addr of next free cell, addr of eof (for case: no more empty slots)
* Dynamic memory: data cells, but with the first slot filled with next "free cell" address
* Features: queue ends at NULL

The [reversed?] transaction queue:
* Static memory: addr of beginning cell
* Dynamic memory: same as free slot queue, but the second slot is finally used: for the data that's inserted (00 for "0-bit", 01 for "1-bit", 10 for "removal", 11 for "insertion")
* Features: "commit" does not need to be here because it's just gonna start a "transaction execution" state outside of this queue
* Debatable: with the reversal, one would need to reverse the linked list before committing all of the changes, but that would allow to only have one pointer to the transaction queue at all times, while with two pointers, no reversal will be needed. I think I should write out both algorithms and see which one will turn out to be simpler

=== THINKING THE OPERATIONS THROUGH ===

* "get" - doesn't have to be protected because it is read-only
* "beginTransaction" - has to be protected
* "add" - has to be protected
* "remove" - has to be protected
* "commit" - has to be protected

add(s, *dataRoot, *freeRoot) {
    result = s.advance()
    if result=END:
        ...
    elif result=UNAVAILABLE:
        ...
    elif result=SUCCESS:
        ...
}

remove(s) {

}
