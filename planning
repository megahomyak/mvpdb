=== FREE NODES THOUGHTS ===

let's say we're not doing the protections yet

free space stack:
root: *node
*node=null => next is at next addr. so the queue is infinite

free space pop with one slot (*root (ptr==index in file)):
. new = *root // read
. next = *new // read
. if next=null:
. . next = new+blocksize
. . *next = null // write
. *root = next // write
. rt new

free space pop with two slots (*root, *end): // this is better because otherwise there would still be two memory areas taken, but in this case it even takes less space (and less ops)
. freeSlot = *root // read
. if freeSlot=null:
. . freeSlot = *end // read
. . *end = freeSlot + 4 // write
. else:
. . *root = *freeSlot // read, then write
. rt freeSlot

free space push (*root, *new):
. *new = *root // read, then write
. *root = new // write

every *= is a write, every =* is a read

=== PROTECTED STATIC VARIABLE CHANGE, VARIABLE OF ANY SIZE ===

* bitflips are always atomic (bc there's no state between a "0" and a "1")
* two slots for the variable and one bit to indicate which slot is active ("0" = first, "1" = second)
* init the bit with "0" and the first slot with a _valid_ variable value. do this on database initialization
* on variable change, write to the opposite slot (its index being `1 - index_bit`). after the write, flip the index bit

=== AN IDEA ABOUT STORING THE STACK STATE INSIDE OF THE FILE ===

I guess everything can be made perfect if all the internal state (i.e. the local variables from the stack) from the db's library functions can be stored inside the static area in the file, except for constants, which will only store various offsets, and the file interaction object (the thing that can do reads or writes)

In fact, this can be extended by splitting the code into states, where it will be like this: (state info available for reading, any position in file available for writing) -> (everything available for reading, nothing available for writing). After the state finishes execution, it needs to switch to another state, with the "nothing to do" state being an exception to that (it should be a valid state, but shouldn't switch to other states, and instead control should be passed back to the caller). This all can be done with something like this:

const stateIds = {
    first: 0,
    second: 1,
    end: 2,
};

let writeStateToFile = state => {
    let bytes = state.makeBytes();
    /* ... */
};

let processStates = initialState => {
    let state = initialState;
    for (;;) {
        if (state.id == stateIds.end) {
            return;
        }
        state = {
            stateIds.first: (ctx, writer) => {
                writer.write(ctx.some_addr, ctx.some_value + 1);
                let reader = writer.makeReader();
                if (reader.read(ctx.some_other_addr)) {
                    return makeStateSecond();
                } else {
                    return makeEndState();
                }
            },
            stateIds.second: (ctx, writer) => {
                // imagine something here
                return makeEndState();
            },
        }[state.id](state???, makeWriter());
        writeStateToFile(state);
    }
};

=== DOING EVERYTHING AS IF THERE'S NO POWER-DOWN PROTECTION TO FURTHER TURN THE CODE INTO POWER-DOWN PROTECTED CODE ===

How to do the unprotected->protected conversion:
* Group file reads and file writes in the code into "write segments" and "read segments"
* Before every write segment, do a state save
* For the input data (i.e. the array of data to add/remove), have it be accessible through a separate parameter which may be null (for recovery cases)

To remove unnecessary saves, this thing can be remodeled:
* We start with a "does state depend on changes that may be overwritten?" flag set to "0"
* On writes, if the flag is "1", state must be saved before the write and the flag should be set to "0"
* On reads, the flag is set to "1"

Actually, the only time something has to be done is when there's any indirection. This is why writes to static state are safe: no pointers => no indirection. But I'm not sure about this, the static area access may not be entirely without indirection. Maybe this all is only about getting addresses, not the values that can be read from them

Essentially, I need to separate code into regions that can be re-run with the same static data but differing dynamic data?? One way to know we're not going into dynamic data as a data source is by not using any pointers

=== THINKING THROUGH THE STORAGE OF DIFFERENT ENTITIES ===

The data tree:
* Static memory: ptr to root (for case: empty tree, however, an impl with "0"-"1"-pointers may also be used, it's not much different)
* Dynamic memory: ["0"-ptr, "1"-ptr] slots
* Features: any of the branch pointers may be NULL

The free slot FIFO queue:
* Static memory: addr of next free cell, addr of eof (for case: no more empty slots)
* Dynamic memory: data cells, but with the first slot filled with next "free cell" address
* Features: queue ends at NULL

The [reversed?] transaction queue:
* Static memory: addr of beginning cell
* Dynamic memory: same as free slot queue, but the second slot is finally used: for the data that's inserted (00 for "0-bit", 01 for "1-bit", 10 for "removal", 11 for "insertion")
* Features: "commit" does not need to be here because it's just gonna start a "transaction execution" state outside of this queue
* Debatable: with the reversal, one would need to reverse the linked list before committing all of the changes, but that would allow to only have one pointer to the transaction queue at all times, while with two pointers, no reversal will be needed. I think I should write out both algorithms and see which one will turn out to be simpler

=== THINKING THE OPERATIONS THROUGH ===

* "get" - doesn't have to be protected because it is read-only
* "beginTransaction" - has to be protected
* "add" - has to be protected
* "remove" - has to be protected
* "commit" - has to be protected

add(s, *dataRoot, *freeRoot) {
    result = s.advance()
    if result=END:
        ...
    elif result=UNAVAILABLE:
        ...
    elif result=SUCCESS:
        ...
}

remove(s) {

}
